
#set -eux
export DEBIAN_FRONTEND=noninteractive
source /$IITH_CHARM_DIR/utils/common
set_env_paths

open-port 2152/udp
export GIT_SSL_NO_VERIFY=1


echo "$branch" > $IITH_CHARM_DIR/.branch
echo "$revision" > $IITH_CHARM_DIR/.revision
echo "$hw" > $IITH_CHARM_DIR/.hw
update_hostname(){
  HOSTNAME=`echo $JUJU_UNIT_NAME | sed 's|/|-|'`
  echo "$HOSTNAME" > /etc/hostname
  hostname $HOSTNAME
  echo "127.0.0.1 `hostname`" > /etc/hosts
}

configure_hosts(){
  realm=`config-get realm`
  #define fqdn for MME
  if [ -z "$(grep -o "`hostname`.$realm" /etc/hosts)" ]; then
     echo 127.0.0.1 localhost > /etc/hosts
     echo 127.0.0.1 `hostname`.$realm `hostname` mme >> /etc/hosts
  fi
}

build_mme(){
  status-set maintenance "Building mme"
  $build_run_scripts/build_spgw -i -f
  $build_run_scripts/build_mme -i -f
  $build_run_scripts/build_mme
}

configure_mme(){
  cp $IITH_CHARM_DIR/files/mme /etc/init/mme.conf

  # copy config templates
  mkdir -p $epc_conf_path
  cp $openair_path/ETC/mme.conf $epc_conf_path/mme.conf
  cp $openair_path/ETC/mme_fd.conf $freediameter_conf_path/mme_fd.conf

  # generate cert
  fqdn=`hostname --fqdn`
  $build_run_scripts/check_mme_s6a_certificate $freediameter_conf_path $fqdn
}

configure_network(){
    #allow dhcp
    local eth=$1
    #added by luhan
    if [ "$eth" = "eth0" ]; then
      return
    fi
    local file=/etc/network/interfaces.d/${eth}.cfg
    cp ./files/eth1_tpl.cfg $file
    sed -i -e "s/eth1/$eth/g" $file

    #prevent dhcp gateway
    local hook=/etc/dhcp/dhclient-enter-hooks.d/net-${eth}
    cp ./files/dhclient_hook_tpl $hook
    sed -i -e "s/eth1/$eth/g" $hook
    chmod +x $hook
}
echo "$rrh_active" >  $IITH_CHARM_DIR/.rrh_active
echo "no"  > $IITH_CHARM_DIR/.rrh_gw_running
echo "no"  > $IITH_CHARM_DIR/.epc_running

gitAlreadyInstalled=$(dpkg --get-selections git 2>/dev/null | grep -c 'install') || true
if [ ! $gitAlreadyInstalled -eq 1 ]; then # If git is NOT installed
   apt-get install -y git # Ensure necessary git dependency exist.
fi

machine_type=`virt-what`


juju-log  "Fetching and installing IBX for $hw"
status-set maintenance "Fetching and installing IBX for $hw"

if [ -f $IITH_CHARM_DIR/.config_file ]; then
   juju-log "Save the config file somewhere"
   cp $conf_path/$(cat $IITH_CHARM_DIR/.config_file) /tmp/
fi

echo -n | openssl s_client -showcerts -connect gitlab.eurecom.fr:443 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' >> /etc/ssl/certs/ca-certificates.crt

#everytime refresh the installation 
if [ -d "$openair_path" ]; then  
   #juju-log "Removing the installation directory"
   #rm -rf $openair_path
    juju-log "Updating the installation directory"
    cd $openair_path 
    git checkout 418a8a4599b58b7597d35bc4ce3f876150856f14
    git pull
    cd -
else
    git clone --branch $branch https://gitlab.eurecom.fr/oai/openairinterface5g.git $openair_path
    if [ "$revision" != "head" ]; then 
	cd $openair_path 
	git checkout 418a8a4599b58b7597d35bc4ce3f876150856f14
	cd -
    fi 
fi

if [ -f $IITH_CHARM_DIR/.config_file ]; then
   if [ -f /tmp/$(cat $IITH_CHARM_DIR/.config_file) ]; then
      juju-log "Retrieve the saved config file"
      mv /tmp/$(cat $IITH_CHARM_DIR/.config_file) $conf_path/
   fi
fi

#Some software installations have to be done prior to build the EURECOM eNB/UE.
status-set maintenance "Installing some dependencies"
juju-log "Long process of installation of basic packages"

#We don't need phpmyadmin because the database will be somewhere else
#sed -i "s/phpmyadmin/#phpmyadmin/" /srv/IBX/cmake_targets/tools/build_helper


if [ "$machine_type"  == "lxc" -o "$machine_type" == "docker" ]; then
    juju-log "Can't install the required kernel in $machine_type env. Proceed with the current kernel."
else  
    check_current_kernel
    if [[ $REQUIRED_KERNEL_IS_INSTALLED == false ]]; then
	if [ "$(cat $IITH_CHARM_DIR/.reboot)" != "reboot" ]; then  
	    juju-log "installing the required kernel and reboot"
	    status-set maintenance "installing the required kernel and rebooting"
	    install_required_kernel
  	    echo "reboot" > $IITH_CHARM_DIR/.reboot 
	    juju-reboot --now
	else 
	    juju-log "Can't install the required kernel. Proceed with the current kernel."
	fi 
    fi
fi 

config_file_rf="null"

if [ "$config_file" == "default" ]; then 

    if [ "$hw" == "usrp" -o "$hw" == "USRP" ]; then
	config_file=$config_file_usrp
	config_file_rrh=$config_file_usrp_rrh	
    elif [ "$hw" == "bladerf" -o "$hw" == "BLADERF" ]; then
	config_file=$config_file_bladerf
	config_file_rrh=$config_file_bladerf_rrh	
    elif [ "$hw" == "sodera" -o "$hw" == "lmssdr" ]; then
	config_file=$config_file_sodera
	config_file_rrh=$config_file_sodera_rrh
	config_file_rf=$config_file_sodera_path/$config_file_sodera_5mhz_lb
    else
	config_file=$config_file_exmimo
	config_file_rrh=$config_file_exmimo_rrh	
    fi 
else 
    # relative path 
    if [ -f $conf_path/$config_file ]; then 
	#config_file=$conf_path/$config_file
	echo "setting the config file to: $config_file"
	# to be improved as a function of the band
	if [ "$hw" == "sodera" -o "$hw" == "lmssdr" ]; then
	    config_file_rf=$config_file_sodera_path/$config_file_sodera_5mhz_lb
	fi 
    # absolute path 
    elif [ -f $config_file ] ; then 
	echo "please provide the relative path to: $config_file"
	status-set error "Provide a relative path to the configuration file ($config_file)"
    else 
	juju-log "configuration file ($config_file) not found"
	status-set error "configuration file ($config_file) not found"
    fi 

fi


if  [ "$rrh_active" == "yes" ]; then

    juju-log "setting eNB configuration file to $config_file_rrh"
    


    sed -r -i "/local_if_name/ s/\".+\"/\"$rrh_if_name\"/" $conf_path/$config_file_rrh
    
    if [ "$rrh_tr_mode" == "raw" ]; then 
	read mac_addr </sys/class/net/$rrh_if_name/address
	sed -r -i "/local_address/ s/\".+\"/\"$mac_addr\"/" $conf_path/$config_file_rrh

    elif [ "$rrh_tr_mode" == "udp" ]; then 
	enb_public_ip=`unit-get public-address`
	get_ip_address $enb_public_ip
	status=$?
	if [ "$status" == "1" ] ; then
	    status-set error "nslookup failed for the eNB host name ($enb_public_ip)"
	else
	    sed -r -i "/local_address/ s/\".+\"/\"$validated_public_ip\"/" $conf_path/$config_file_rrh 
	fi 
    
    else 
	status-set error "invalide RRH transport mode"
    fi 
  
    echo "Building ENB with RRH gateway"
    status-set maintenance "Building ENB for RRH gateway"
    $build_path/build_oai -I 
    $build_path/build_oai -C --eNB -t ETHERNET -w None
    
    
else
    
    sed -r -i  "s/(rrh_gw_active[ ]*=[ ]*)\"[a-zA-Z]+\"/\1\"no\"/" $conf_path/$config_file
    juju-log "setting eNB configuration file to $config_file"
    echo "$config_file" > $IITH_CHARM_DIR/.config_file
    echo "$config_file_rf" > $IITH_CHARM_DIR/.config_file_rf
    cp $IITH_CHARM_DIR/.config_file $openair_path
    cp $IITH_CHARM_DIR/.config_file_rf $openair_path
    
    if [ "$hw" == "usrp" -o "$hw" == "USRP" ]; then

	echo "run_enb_s1_usrp" > $IITH_CHARM_DIR/.execute
	echo 1 > $openair_path/.local_remote_rf
	cp $IITH_CHARM_DIR/.execute $openair_path

	echo "Building IBX with USRP hardware"
	status-set maintenance "Building IBX for USRP"
	$build_path/build_oai -I -w USRP
	$build_path/build_oai -C --eNB -w USRP
	
    elif [ "$hw" == "bladerf" -o "$hw" == "BLADERF" ]; then
	echo "run_enb_s1_usrp" > $IITH_CHARM_DIR/.execute
	echo 1 > $openair_path/.local_remote_rf
	cp $IITH_CHARM_DIR/.execute $openair_path
	
	echo "Building ENB with BLADERF hardware"
	status-set maintenance "Building ENB for BLADERF"
	$build_path/build_oai -I  -w BLADERF
	$build_path/build_oai -C --eNB -w BLADERF

	echo "Building ENB with EXMIMO hardware"
	status-set maintenance "Building ENB for EXMIMO"
	$build_path/build_oai -I
	$build_path/build_oai -C --eNB -w EXMIMO
    else
	juju-log -l WARNING "Hardware option not valid, can't proceed because the building procedure cannot be done..."
    fi
fi 

export DEBIAN_FRONTEND=noninteractive
source $IITH_CHARM_DIR/utils/common
update_sources_list
set_env_paths

open-port 2152/udp

branch=`config-get branch`
revision=`config-get revision`
echo "$branch" > $IITH_CHARM_DIR/.branch
echo "$revision" > $IITH_CHARM_DIR/.revision

status-set maintenance "Fetching and installing Openair4G"

update_hostname
configure_network `config-get eth`

install_packages
clone_repo
juju_install_kernel

configure_hosts

build_mme

#add the oaieNB init
juju-log "Add oaieNB init script"
cp $IITH_CHARM_DIR/files/oaieNB /etc/init/oaieNB.conf

status-set blocked "Waiting for EPC connection"
